SECTION 2: ALL THE BASICS YOU NEED

2.4 WHAT IS CORE DATA?

CoreData is a data persistence framework for our device or the cloud
It is NOT a real database; it is an OBJECT RELATIONAL MAPPER
It has a database at its lowest level, but it is a framework that allows you to access the data in an easy way.
It arranges our tables into CLASSES and OBJECTS. Instead of querying a column of a table, we treat it as a property of an object using typical swift dot syntax. (see 2.4.1)

THE CORE DATA STACK (see 2.4.2) From bottom to top:
1. There are five different storage types
2. NSPersistentStore - deals directly with the storage types
3. NSPersistentStoreCoordinator & NSManagedObjectModel - We come into contact with this more than the NSPersistentStore. It associates the PersistentStore with the NSManagedObjectModel. Serves as the mediator between the persistentStore and the NSManagedObjectContext.
4. NSManagedObjectContext - THE MOST IMPORTANT PIECE! WE WORK WITH THIS MOST FREQUENTLY! We use this for saving and sending queries etc. Everything below the NSManagedObjectContext is 'nice to know' but we don't really work with it directly so much.

To see how these objects communicate for a query and response (see 2.4.3)

What is the ManagedObjectModel? see
When we build ManagedObjectModels they look like objects with properties:
Entities (look like objects) - The tables of our database
Attributes (look like properties) - The columns of the tables in our database
There are also:
Relationships
Fetched Properties

but we'll go into more detail later.

FetchRequest - our query to the ManagedObjectContext. Includes: Entity (table), Predicate (optional), Sort descriptor (optional)

2.5 FIRST DATA MODEL IN XCODE

Create new project and select Use CoreData when you name your project. What does this do?
This creates a xcdatamodel file which you can make your entities in.
In the AppDelegate: A default CoreData stack is created for you. We will make our own later.

To create CoreData from scratch:
Create a project without selecting Use CoreData.
Create a new file and select Data Model (double check that you are adding the data model to the target)

2.6 ENTITIES AND ATTRIBUTES

Click on the Data Model file.
There is an 'add entity' button at the bottom of the window.
Name the entity with a capital letter as it will be mapped to a class.

You can toggle between the table and model views by pressing the buttons at the bottom right of the window.

2.7 RELATIONSHIPS

ONE-TO-ONE - example: One person owns one book. The book, in turn has one owner.

ONE-TO-MANY - example: One person owns many books. Each book has only one owner.

MANY-TO-MANY - example: three orders are made to an online book store. Each order can contain many books, but each title can also belong to more than one order. Note that this means there is more than one instance of the book. (see 2.7.1)

2.8 ADDING RELATIONSHIPS TO ENTITIES

In the table editor you can add a relationship. The utilities panel allows you to specify what kind of entity it is (one-to-many etc.)

also in the utilities panel is the 'deletion rule'. We select 'nullify' for the note. This is because when we delete the notebook, all of its notes need to be nullified.

2.9 CREATE THE DATASTACK

IN THE APP DELEGATE
import CoreDate

Persistent Container - a computed property. The container is responsible for loading the persistent stores and encapsulates the CoreData stack in your application (wrapper).

You then need to create a function that saves the changes to the managed object context when the application is closed.





